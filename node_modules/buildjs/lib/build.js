var path = require('path');
var fs = require('fs');

module.exports = function (config) {
    var _config = config || {};
    var basePath;
    var build = {
        "watch": false,
        "compress": false,
        "scripts": {
            "time": 0,
            "output": false,
            "input": false
        },
        "styles": {
            "time": 0,
            "output": false,
            "input": false
        }
    }

    var _print = function (str, color) {
        var colors = {
            black: 30,
            red: 31,
            green: 32,
            yellow: 33,
            blue: 34,
            magenta: 35,
            cyan: 36,
            white: 37,

            reset: 0,
            bold: 1,
            underline: 4,
            reversed: 7
        };

        console.log('\x1B[' + colors[color] + 'm' + str + '\x1B[' + colors['reset'] + 'm');
    }

    var _precheck = function (input, output, type, compress, watch) {
        if (typeof input == 'string') {
            input = [input];
        }

        var output_file = path.join(basePath, output);

        path.exists(output_file, function (exists) {
            if (exists) {
                var fd = fs.openSync(output_file, "r");
                var sig = fs.readSync(fd, 25, 0, "ascii");
                var time = /[\d]{10,25}/.exec(sig);

                if (time) {
                    if (type == 'js') {
                        build.scripts.time = time[0];
                    }
                    else if (type == 'css') {
                        build.styles.time = time[0];
                    }

                    var maxTime = 0;
                    var input_file;

                    input.forEach(function (file, i) {
                        input_file = path.join(basePath, file);

                        // Bind watcher for each processed file
                        if (watch) {
                            var interval = parseInt(watch);
                            fs.watch(input_file, { persistent: true, interval: !isNaN(interval) ? interval : 2000 }, function (event, filename) {
                                if (event == 'change') {
                                    if (typeof filename != 'undefined') {
                                        _print('[BUILD] Changed file: ' + filename, 'bold');
                                    } else {
                                        _print('[BUILD] An file changed', 'bold');
                                    }

                                    // Reprocess all files
                                    _process(input, output, type, compress, false, true);
                                }
                            });
                        }

                        // Collect file stats
                        fs.stat(input_file, function (err, stat) {
                            if (!err) {
                                mtime = stat.mtime.getTime();

                                if (mtime > maxTime) {
                                    maxTime = mtime;
                                }
                            }

                            if (i == input.length - 1) {
                                if (type == 'js' && maxTime > build.scripts.time) {
                                    build.scripts.time = mtime;

                                    _process(input, output, type, compress, false, false);
                                }
                                else if (type == 'css' && maxTime > build.styles.time) {
                                    build.styles.time = mtime;

                                    _process(input, output, type, compress, false, false);
                                }
                            }
                        });
                    });
                } else {
                    _process(input, output, type, compress, watch, true);
                }
            } else {
                _process(input, output, type, compress, watch, true);
            }
        });
    }

    var _process = function (input, output, type, compress, watch, time) {
        var output_data = "", input_file, output_file;

        if (typeof input == 'string') {
            input = [input];
        }

        if (type == 'js' && compress) {
            var jsp = require("uglify-js").parser;
            var pro = require("uglify-js").uglify;
        }

        if (type == 'css' && compress) {
            var uglifycss = require("uglifycss");
        }

        try {
            input.forEach(function (file, i) {
                input_file = path.join(basePath, file);
                var orig_data = fs.readFileSync(input_file, 'ascii');

                // Minify and optimize input data
                if (type == 'js' && compress) {
                    var ast = jsp.parse(orig_data); // parse code and get the initial AST
                    ast = pro.ast_mangle(ast); // get a new AST with mangled names
                    ast = pro.ast_squeeze(ast); // get an AST with compression optimizations
                    output_data += pro.gen_code(ast) + "\n"; // compressed code here
                } else if (type == 'css' && compress) {
                    output_data += uglifycss.processString(orig_data, {
                        maxLineLen: 150
                    }) + "\n";
                } else {
                    output_data += orig_data + "\n";
                }

                // Bind watcher for each processed file
                if (watch) {
                    var interval = parseInt(watch);
                    fs.watch(input_file, { persistent: true, interval: !isNaN(interval) ? interval : 2000 }, function (event, filename) {
                        if (event == 'change') {
                            if (typeof filename != 'undefined') {
                                _print('[BUILD] Changed file: ' + filename, 'bold');
                            } else {
                                _print('[BUILD] An file changed', 'bold');
                            }

                            // Reprocess all files
                            _process(input, output, type, compress, false);
                        }
                    });
                }

                if (time) {
                    // Collect file stats
                    fs.stat(path.join(basePath, file), function (err, stat) {
                        if (!err) {
                            mtime = stat.mtime.getTime();

                            if (type == 'js' && (mtime > build.scripts.time || typeof build.scripts.time == 'undefined')) {
                                build.scripts.time = mtime;
                            }
                            else if (type == 'css' && (mtime > build.styles.time || typeof build.scripts.time == 'undefined')) {
                                build.styles.time = mtime;
                            }
                        }
                    });
                }
            });

            // Save combined output data
            if (output) {
                output_file = path.join(basePath, output);
                if (type == 'js') {
                    output_data = "/* " + build.scripts.time + " */" + "\n" + output_data;
                }
                else if (type == 'css') {
                    output_data = "/* " + build.scripts.time + " */" + "\n" + output_data;
                }

                fs.writeFile(output_file, output_data, function (err) {
                    if (err) {
                        throw new Error(_print("[BUILD] Cant write to output file: " + output_file, "red"));
                    }
                });
            }
        }
        catch (err) {
            console.error(_print("[BUILD] There was an error opening the file:" + input_file, "red"));
            console.log(err);
        }

        return output;
    }

    basePath = _config.basePath || path.dirname(require.main.filename);
    build = require(path.join(basePath, 'build.json'));

    if (typeof build != 'object') {
        throw new Error(_print("[BUILD] Cant load configuration from build.json", "red"));
    }

    if (build.scripts && build.scripts.input) {
        _precheck(build.scripts.input, build.scripts.output, 'js',
                typeof build.scripts.compress != 'undefined' ? build.scripts.compress : build.compress || false,
                typeof build.scripts.watch != 'undefined' ? build.scripts.watch : build.watch || false);
    }

    if (build.styles && build.styles.input) {
        _precheck(build.styles.input, build.styles.output, 'css',
                typeof build.styles.compress != 'undefined' ? build.styles.compress : build.compress || false,
                typeof build.styles.watch != 'undefined' ? build.styles.watch : build.watch || false);
    }

    return build
}